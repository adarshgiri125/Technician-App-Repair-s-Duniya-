import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.onPrimaryContainer,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          shadowColor: colorScheme.primary,
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray700,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray700,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 24.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onError,
          fontSize: 16.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X19000000),
    primaryContainer: Color(0XFF1A1A1A),

    // Error colors
    errorContainer: Color(0XFFCFD4DC),
    onError: Color(0XFFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF344053),
    onPrimaryContainer: Color(0XFFC4C4C4),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // BlueGray
  Color get blueGray100 => const Color(0XFFCCCBCB);
  Color get blueGray10001 => const Color(0XFFD9D9D9);
  Color get blueGray10002 => const Color(0XFFCFD4DC);
  Color get blueGray10003 => const Color(0XFFCDD1D8);
  Color get blueGray500 => const Color(0XFF667084);
  Color get blueGray700 => const Color(0XFF475466);
  Color get blueGray800 => const Color(0XFF344053);

  // BlueGrayE
  Color get blueGray100E5 => const Color(0XE5CDD1D8);

  // Gray
  Color get gray400 => const Color(0XFFC4C4C4);
  Color get gray40001 => const Color(0XFFCACACA);
  Color get gray40002 => const Color(0XFFC0C0C0);
  Color get gray50 => const Color(0XFFF8F8F8);
  Color get gray500 => const Color(0XFFABABAB);
  Color get gray5001 => const Color(0XFFFAFAFA);
  Color get gray700 => const Color(0XFF6A6A6A);
  Color get gray800 => const Color(0XFF3C3C3C);
  Color get gray80001 => const Color(0XFF3B3B3B);
  Color get gray900 => const Color(0XFF1E2328);
  Color get gray90001 => const Color(0XFF181818);

  // Grayc
  Color get gray9000c => const Color(0X0C101828);

  // LightGreen
  Color get lightGreenA700 => const Color(0XFF39E61D);
  Color get lightGreenA70001 => const Color(0XFF2DCE1A);

  // Orange
  Color get orangeA100 => const Color(0XFFFFD493);

  // Red
  Color get red50 => const Color(0XFFFFECEC);
  Color get red500 => const Color(0XFFF54444);
  Color get red800 => const Color(0XFFD42424);
  Color get redA700 => const Color(0XFFE41212);
  Color get redA70001 => const Color(0XFFF20000);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
